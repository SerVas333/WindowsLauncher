using System;
using WindowsLauncher.Core.Enums;

namespace WindowsLauncher.Core.Models
{
    /// <summary>
    /// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ –∏–∑ –ª–∞—É–Ω—á–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    /// </summary>
    public class RunningApplication
    {
        /// <summary>
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public int ApplicationId { get; set; }

        /// <summary>
        /// –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public string Category { get; set; } = string.Empty;

        /// <summary>
        /// –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (emoji –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        /// </summary>
        public string IconText { get; set; } = "üì±";

        /// <summary>
        /// –¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public ApplicationType Type { get; set; }

        /// <summary>
        /// ID –ø—Ä–æ—Ü–µ—Å—Å–∞
        /// </summary>
        public int ProcessId { get; set; }

        /// <summary>
        /// –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        /// </summary>
        public string ProcessName { get; set; } = string.Empty;

        /// <summary>
        /// Handle –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        /// </summary>
        public IntPtr MainWindowHandle { get; set; }

        /// <summary>
        /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        /// </summary>
        public string MainWindowTitle { get; set; } = string.Empty;

        /// <summary>
        /// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        /// </summary>
        public string LaunchedBy { get; set; } = string.Empty;

        /// <summary>
        /// –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        /// </summary>
        public string ExecutablePath { get; set; } = string.Empty;

        /// <summary>
        /// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        /// </summary>
        public string Arguments { get; set; } = string.Empty;

        /// <summary>
        /// –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        /// </summary>
        public string WorkingDirectory { get; set; } = string.Empty;

        /// <summary>
        /// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–æ–∫–Ω–æ –≤–∏–¥–∏–º–æ)
        /// </summary>
        public bool IsActive { get; set; }

        /// <summary>
        /// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ
        /// </summary>
        public bool IsMinimized { get; set; }

        /// <summary>
        /// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
        /// </summary>
        public bool IsResponding { get; set; } = true;

        /// <summary>
        /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–≤ –ú–ë)
        /// </summary>
        public long MemoryUsageMB { get; set; }

        /// <summary>
        /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        /// </summary>
        public DateTime LastStatusUpdate { get; set; }

        public override string ToString()
        {
            return $"{Name} (PID: {ProcessId})";
        }

        /// <summary>
        /// –°–æ–∑–¥–∞—Ç—å RunningApplication –∏–∑ Application –∏ Process —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        /// </summary>
        public static RunningApplication FromApplication(Application app, System.Diagnostics.Process process, string launchedBy)
        {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
            string processName = app.Name; // Fallback –Ω–∞ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            IntPtr mainWindowHandle = IntPtr.Zero;
            string mainWindowTitle = string.Empty;
            DateTime startTime = DateTime.Now;
            bool isActive = false;
            bool isResponding = true;
            long memoryUsageMB = 0;

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                if (!process.HasExited)
                {
                    processName = process.ProcessName;
                    mainWindowHandle = process.MainWindowHandle;
                    mainWindowTitle = process.MainWindowTitle ?? string.Empty;
                    startTime = process.StartTime;
                    isActive = process.MainWindowHandle != IntPtr.Zero;
                    isResponding = process.Responding;
                    memoryUsageMB = process.WorkingSet64 / 1024 / 1024;
                }
            }
            catch (InvalidOperationException)
            {
                // –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π HasExited –∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è
            }

            return new RunningApplication
            {
                ApplicationId = app.Id,
                Name = app.Name,
                Description = app.Description,
                Category = app.Category,
                IconText = app.IconText,
                Type = app.Type,
                ProcessId = process.Id,
                ProcessName = processName,
                MainWindowHandle = mainWindowHandle,
                MainWindowTitle = mainWindowTitle,
                StartTime = startTime,
                LaunchedBy = launchedBy,
                ExecutablePath = app.ExecutablePath,
                Arguments = app.Arguments ?? string.Empty,
                WorkingDirectory = app.WorkingDirectory ?? string.Empty,
                IsActive = isActive,
                IsMinimized = false, // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ Windows API
                IsResponding = isResponding,
                MemoryUsageMB = memoryUsageMB,
                LastStatusUpdate = DateTime.Now
            };
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ Process
        /// </summary>
        public void UpdateFromProcess(System.Diagnostics.Process process)
        {
            ProcessName = process.ProcessName;
            MainWindowHandle = process.MainWindowHandle;
            MainWindowTitle = process.MainWindowTitle ?? string.Empty;
            IsActive = !process.HasExited && process.MainWindowHandle != IntPtr.Zero;
            IsResponding = process.Responding;
            MemoryUsageMB = process.WorkingSet64 / 1024 / 1024;
            LastStatusUpdate = DateTime.Now;
        }
    }
}