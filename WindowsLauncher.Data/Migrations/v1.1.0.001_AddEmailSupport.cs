using System.Threading.Tasks;
using WindowsLauncher.Core.Interfaces;
using WindowsLauncher.Core.Models;

namespace WindowsLauncher.Data.Migrations
{
    /// <summary>
    /// Миграция v1.1.0.001 - добавление поддержки email функциональности
    /// Добавляет таблицы CONTACTS и SMTP_SETTINGS
    /// </summary>
    public class AddEmailSupport : IDatabaseMigration
    {
        public string Name => "AddEmailSupport";
        public string Version => "1.1.0.001";
        public string Description => "Add email functionality: contacts address book and SMTP settings";

        public async Task UpAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            // Проверяем что таблицы еще не созданы
            bool contactsExists = await context.TableExistsAsync("CONTACTS");
            bool smtpExists = await context.TableExistsAsync("SMTP_SETTINGS");
            
            if (contactsExists && smtpExists)
            {
                // Таблицы уже существуют, пропускаем миграцию
                return;
            }
            
            // 1. Создаем таблицу контактов
            if (!contactsExists)
            {
                await CreateContactsTableAsync(context, databaseType);
            }
            
            // 2. Создаем таблицу SMTP настроек
            if (!smtpExists)
            {
                await CreateSmtpSettingsTableAsync(context, databaseType);
            }
            
            // 3. Создаем индексы
            await CreateEmailIndexesAsync(context, databaseType);
            
            // 4. Добавляем начальные данные
            await SeedEmailDataAsync(context, databaseType);
        }

        private async Task CreateContactsTableAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            string sql = databaseType switch
            {
                DatabaseType.SQLite => @"
                    CREATE TABLE CONTACTS (
                        ID INTEGER PRIMARY KEY AUTOINCREMENT,
                        NAME TEXT NOT NULL,
                        EMAIL TEXT NOT NULL,
                        COMPANY TEXT,
                        GROUP_NAME TEXT,
                        NOTES TEXT,
                        IS_ACTIVE INTEGER NOT NULL DEFAULT 1,
                        CREATED_AT TEXT NOT NULL DEFAULT (datetime('now')),
                        UPDATED_AT TEXT
                    );",
                    
                DatabaseType.Firebird => @"
                    CREATE TABLE CONTACTS (
                        ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        NAME VARCHAR(200) NOT NULL,
                        EMAIL VARCHAR(250) NOT NULL,
                        COMPANY VARCHAR(200),
                        GROUP_NAME VARCHAR(100),
                        NOTES VARCHAR(1000),
                        IS_ACTIVE INTEGER NOT NULL DEFAULT 1,
                        CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                        UPDATED_AT TIMESTAMP
                    );",
                    
                _ => throw new System.NotSupportedException($"Database type {databaseType} is not supported")
            };
            
            await context.ExecuteSqlAsync(sql);
        }

        private async Task CreateSmtpSettingsTableAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            string sql = databaseType switch
            {
                DatabaseType.SQLite => @"
                    CREATE TABLE SMTP_SETTINGS (
                        ID INTEGER PRIMARY KEY AUTOINCREMENT,
                        HOST TEXT NOT NULL,
                        PORT INTEGER NOT NULL,
                        USERNAME TEXT NOT NULL,
                        ENCRYPTED_PASSWORD TEXT NOT NULL,
                        USE_SSL INTEGER NOT NULL DEFAULT 1,
                        USE_STARTTLS INTEGER NOT NULL DEFAULT 0,
                        SERVER_TYPE INTEGER NOT NULL,
                        DEFAULT_FROM_EMAIL TEXT,
                        DEFAULT_FROM_NAME TEXT,
                        IS_ACTIVE INTEGER NOT NULL DEFAULT 1,
                        CONSECUTIVE_ERRORS INTEGER NOT NULL DEFAULT 0,
                        LAST_SUCCESSFUL_SEND TEXT,
                        CREATED_AT TEXT NOT NULL DEFAULT (datetime('now')),
                        UPDATED_AT TEXT
                    );",
                    
                DatabaseType.Firebird => @"
                    CREATE TABLE SMTP_SETTINGS (
                        ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        HOST VARCHAR(200) NOT NULL,
                        PORT INTEGER NOT NULL,
                        USERNAME VARCHAR(200) NOT NULL,
                        ENCRYPTED_PASSWORD VARCHAR(1000) NOT NULL,
                        USE_SSL INTEGER NOT NULL DEFAULT 1,
                        USE_STARTTLS INTEGER NOT NULL DEFAULT 0,
                        SERVER_TYPE INTEGER NOT NULL,
                        DEFAULT_FROM_EMAIL VARCHAR(250),
                        DEFAULT_FROM_NAME VARCHAR(200),
                        IS_ACTIVE INTEGER NOT NULL DEFAULT 1,
                        CONSECUTIVE_ERRORS INTEGER NOT NULL DEFAULT 0,
                        LAST_SUCCESSFUL_SEND TIMESTAMP,
                        CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                        UPDATED_AT TIMESTAMP
                    );",
                    
                _ => throw new System.NotSupportedException($"Database type {databaseType} is not supported")
            };
            
            await context.ExecuteSqlAsync(sql);
        }

        private async Task CreateEmailIndexesAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            // Индексы для таблицы CONTACTS
            string[] contactIndexes = databaseType switch
            {
                DatabaseType.SQLite => new[]
                {
                    // Уникальный индекс на email для активных контактов
                    "CREATE UNIQUE INDEX IX_CONTACTS_EMAIL_ACTIVE ON CONTACTS (EMAIL, IS_ACTIVE) WHERE IS_ACTIVE = 1;",
                    
                    // Индекс для поиска по имени
                    "CREATE INDEX IX_CONTACTS_NAME ON CONTACTS (NAME);",
                    
                    // Индекс для группировки
                    "CREATE INDEX IX_CONTACTS_GROUP ON CONTACTS (GROUP_NAME);",
                    
                    // Композитный индекс для активных контактов
                    "CREATE INDEX IX_CONTACTS_ACTIVE_CREATED ON CONTACTS (IS_ACTIVE, CREATED_AT);"
                },
                
                DatabaseType.Firebird => new[]
                {
                    // Firebird не поддерживает partial indexes с WHERE, используем обычный уникальный индекс
                    "CREATE UNIQUE INDEX IX_CONTACTS_EMAIL_ACTIVE ON CONTACTS (EMAIL, IS_ACTIVE);",
                    
                    "CREATE INDEX IX_CONTACTS_NAME ON CONTACTS (NAME);",
                    "CREATE INDEX IX_CONTACTS_GROUP ON CONTACTS (GROUP_NAME);",
                    "CREATE INDEX IX_CONTACTS_ACTIVE_CREATED ON CONTACTS (IS_ACTIVE, CREATED_AT);"
                },
                
                _ => throw new System.NotSupportedException($"Database type {databaseType} is not supported")
            };

            // Индексы для таблицы SMTP_SETTINGS
            string[] smtpIndexes = databaseType switch
            {
                DatabaseType.SQLite => new[]
                {
                    // Уникальный индекс на тип сервера для активных настроек
                    "CREATE UNIQUE INDEX IX_SMTP_SETTINGS_TYPE_ACTIVE ON SMTP_SETTINGS (SERVER_TYPE, IS_ACTIVE) WHERE IS_ACTIVE = 1;",
                    
                    // Индекс для поиска по хосту
                    "CREATE INDEX IX_SMTP_SETTINGS_HOST ON SMTP_SETTINGS (HOST);",
                    
                    // Индекс для активных настроек
                    "CREATE INDEX IX_SMTP_SETTINGS_ACTIVE ON SMTP_SETTINGS (IS_ACTIVE);",
                    
                    // Композитный индекс для мониторинга ошибок
                    "CREATE INDEX IX_SMTP_SETTINGS_ERROR_MONITORING ON SMTP_SETTINGS (IS_ACTIVE, CONSECUTIVE_ERRORS, LAST_SUCCESSFUL_SEND);"
                },
                
                DatabaseType.Firebird => new[]
                {
                    // Firebird аналоги без WHERE clause
                    "CREATE UNIQUE INDEX IX_SMTP_SETTINGS_TYPE_ACTIVE ON SMTP_SETTINGS (SERVER_TYPE, IS_ACTIVE);",
                    "CREATE INDEX IX_SMTP_SETTINGS_HOST ON SMTP_SETTINGS (HOST);",
                    "CREATE INDEX IX_SMTP_SETTINGS_ACTIVE ON SMTP_SETTINGS (IS_ACTIVE);",
                    "CREATE INDEX IX_SMTP_SETTINGS_ERROR_MONITORING ON SMTP_SETTINGS (IS_ACTIVE, CONSECUTIVE_ERRORS, LAST_SUCCESSFUL_SEND);"
                },
                
                _ => throw new System.NotSupportedException($"Database type {databaseType} is not supported")
            };

            // Создаем индексы для контактов
            foreach (var indexSql in contactIndexes)
            {
                await context.ExecuteSqlAsync(indexSql);
            }

            // Создаем индексы для SMTP настроек
            foreach (var indexSql in smtpIndexes)
            {
                await context.ExecuteSqlAsync(indexSql);
            }
        }

        private async Task SeedEmailDataAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            // Добавляем начальные контакты для демонстрации
            string insertContacts = databaseType switch
            {
                DatabaseType.SQLite => @"
                    INSERT OR IGNORE INTO CONTACTS (NAME, EMAIL, COMPANY, GROUP_NAME, NOTES, IS_ACTIVE, CREATED_AT) VALUES
                    ('Системный администратор', 'admin@company.local', 'KDV Corporation', 'IT отдел', 'Системный контакт для администрирования', 1, datetime('now')),
                    ('Техническая поддержка', 'support@company.local', 'KDV Corporation', 'IT отдел', 'Общий контакт технической поддержки', 1, datetime('now'));",
                    
                DatabaseType.Firebird => @"
                    INSERT INTO CONTACTS (NAME, EMAIL, COMPANY, GROUP_NAME, NOTES, IS_ACTIVE, CREATED_AT) 
                    SELECT 'Системный администратор', 'admin@company.local', 'KDV Corporation', 'IT отдел', 'Системный контакт для администрирования', 1, CURRENT_TIMESTAMP 
                    FROM RDB$DATABASE
                    WHERE NOT EXISTS (SELECT 1 FROM CONTACTS WHERE EMAIL = 'admin@company.local');
                    
                    INSERT INTO CONTACTS (NAME, EMAIL, COMPANY, GROUP_NAME, NOTES, IS_ACTIVE, CREATED_AT) 
                    SELECT 'Техническая поддержка', 'support@company.local', 'KDV Corporation', 'IT отдел', 'Общий контакт технической поддержки', 1, CURRENT_TIMESTAMP 
                    FROM RDB$DATABASE
                    WHERE NOT EXISTS (SELECT 1 FROM CONTACTS WHERE EMAIL = 'support@company.local');",
                    
                _ => throw new System.NotSupportedException($"Database type {databaseType} is not supported")
            };

            await context.ExecuteSqlAsync(insertContacts);

            // Примечание: SMTP настройки не добавляем автоматически по соображениям безопасности
            // Администратор должен их настроить через UI
        }

        public async Task DownAsync(IDatabaseMigrationContext context, DatabaseType databaseType)
        {
            // Откат миграции - удаляем созданные таблицы
            await context.ExecuteSqlAsync("DROP TABLE IF EXISTS CONTACTS;");
            await context.ExecuteSqlAsync("DROP TABLE IF EXISTS SMTP_SETTINGS;");
        }
    }
}