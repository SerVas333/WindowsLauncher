using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using WindowsLauncher.Core.Interfaces;
using WindowsLauncher.Core.Models;
using WindowsLauncher.Core.Models.Configuration;

namespace WindowsLauncher.Services.Categories
{
    /// <summary>
    /// Сервис управления категориями приложений
    /// </summary>
    public class CategoryManagementService : ICategoryManagementService
    {
        private readonly IConfiguration _configuration;
        private readonly IApplicationService _applicationService;
        private readonly IUserSettingsRepository _userSettingsRepository;
        private readonly ILogger<CategoryManagementService> _logger;
        private readonly CategoryConfiguration _categoryConfig;
        private readonly object _lockObject = new object();

        // Кэш категорий для производительности
        private List<CategoryDefinition>? _cachedCategories;
        private DateTime _cacheExpiry = DateTime.MinValue;
        private readonly TimeSpan _cacheLifetime = TimeSpan.FromMinutes(5); // Обычное время кэширования

        public CategoryManagementService(
            IConfiguration configuration,
            IApplicationService applicationService,
            IUserSettingsRepository userSettingsRepository,
            ILogger<CategoryManagementService> logger)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _applicationService = applicationService ?? throw new ArgumentNullException(nameof(applicationService));
            _userSettingsRepository = userSettingsRepository ?? throw new ArgumentNullException(nameof(userSettingsRepository));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));

            // Загружаем конфигурацию категорий
            _categoryConfig = new CategoryConfiguration();
            _configuration.GetSection("Categories").Bind(_categoryConfig);

            _logger.LogInformation("CategoryManagementService initialized with {Count} predefined categories",
                _categoryConfig.PredefinedCategories.Count);
        }

        /// <summary>
        /// Получить все доступные категории (предустановленные + динамические)
        /// </summary>
        public async Task<List<CategoryDefinition>> GetAllCategoriesAsync()
        {
            try
            {
                lock (_lockObject)
                {
                    // Проверяем кэш
                    if (_cachedCategories != null && DateTime.Now < _cacheExpiry)
                    {
                        return new List<CategoryDefinition>(_cachedCategories);
                    }
                }

                var categories = new List<CategoryDefinition>();

                // 1. Добавляем предустановленные категории из конфигурации
                categories.AddRange(_categoryConfig.PredefinedCategories);

                // 2. Добавляем динамические категории из базы данных
                if (_categoryConfig.Settings.AllowDynamicCategories)
                {
                    var dbCategories = await _applicationService.GetCategoriesAsync();
                    var predefinedKeys = categories.Select(c => c.Key).ToHashSet();

                    foreach (var dbCategory in dbCategories)
                    {
                        if (!predefinedKeys.Contains(dbCategory))
                        {
                            categories.Add(new CategoryDefinition
                            {
                                Key = dbCategory,
                                DefaultName = dbCategory,
                                LocalizationKey = $"Category_{dbCategory}",
                                Icon = _categoryConfig.Settings.DefaultIcon,
                                Color = _categoryConfig.Settings.DefaultColor,
                                SortOrder = 999,
                                IsSystem = false,
                                IsVisible = true,
                                IsAutoGenerated = true,
                                CreatedAt = DateTime.Now,
                                LastModified = DateTime.Now
                            });
                        }
                    }
                }

                // Сортируем по порядку
                categories = categories.OrderBy(c => c.SortOrder).ThenBy(c => c.DefaultName).ToList();

                // Обновляем кэш
                lock (_lockObject)
                {
                    _cachedCategories = new List<CategoryDefinition>(categories);
                    _cacheExpiry = DateTime.Now.Add(_cacheLifetime);
                }

                _logger.LogDebug("Loaded {Count} categories ({PredefinedCount} predefined, {DynamicCount} dynamic)",
                    categories.Count,
                    _categoryConfig.PredefinedCategories.Count,
                    categories.Count - _categoryConfig.PredefinedCategories.Count);

                return categories;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting all categories");
                return _categoryConfig.PredefinedCategories.ToList();
            }
        }

        /// <summary>
        /// Получить видимые категории с учетом пользовательских настроек
        /// </summary>
        public async Task<List<CategoryDefinition>> GetVisibleCategoriesAsync(User user)
        {
            try
            {
                var allCategories = await GetAllCategoriesAsync();
                var userSettings = await _userSettingsRepository.GetByUserIdAsync(user.Id);
                var hiddenCategories = userSettings?.HiddenCategories ?? new List<string>();

                var visibleCategories = allCategories
                    .Where(c => c.IsVisible && !hiddenCategories.Contains(c.Key))
                    .ToList();

                // Скрываем пустые категории если настроено
                if (_categoryConfig.Settings.HideEmptyCategories)
                {
                    var categoryStats = await GetCategoryStatisticsAsync();
                    visibleCategories = visibleCategories
                        .Where(c => categoryStats.ContainsKey(c.Key) && categoryStats[c.Key] > 0)
                        .ToList();
                }

                _logger.LogDebug("User {Username} has {Count} visible categories",
                    user.Username, visibleCategories.Count);

                return visibleCategories;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting visible categories for user {Username}", user.Username);
                return await GetAllCategoriesAsync();
            }
        }

        /// <summary>
        /// Получить категорию по ключу
        /// </summary>
        public async Task<CategoryDefinition?> GetCategoryByKeyAsync(string key)
        {
            try
            {
                var categories = await GetAllCategoriesAsync();
                return categories.FirstOrDefault(c => c.Key.Equals(key, StringComparison.OrdinalIgnoreCase));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting category by key {Key}", key);
                return null;
            }
        }

        /// <summary>
        /// Создать или обновить категорию
        /// </summary>
        public async Task<bool> SaveCategoryAsync(CategoryDefinition category, User user)
        {
            try
            {
                // Проверяем права доступа
                if (user.Role < Core.Enums.UserRole.Administrator)
                {
                    _logger.LogWarning("User {Username} attempted to save category without permissions", user.Username);
                    return false;
                }

                // Проверяем лимиты
                if (_categoryConfig.Settings.MaxCategories > 0)
                {
                    var allCategories = await GetAllCategoriesAsync();
                    if (allCategories.Count >= _categoryConfig.Settings.MaxCategories)
                    {
                        _logger.LogWarning("Maximum category limit ({Limit}) reached", _categoryConfig.Settings.MaxCategories);
                        return false;
                    }
                }

                // Валидация
                if (string.IsNullOrWhiteSpace(category.Key) || string.IsNullOrWhiteSpace(category.DefaultName))
                {
                    _logger.LogWarning("Invalid category data: Key={Key}, Name={Name}", category.Key, category.DefaultName);
                    return false;
                }

                // Обновляем метки времени
                category.LastModified = DateTime.Now;

                // Сохраняем в конфигурацию или базу данных
                // Примечание: В текущей реализации сохраняем только в кэш
                // В полной реализации нужно добавить персистентное хранение пользовательских категорий

                InvalidateCache();

                _logger.LogInformation("Category {Key} saved by user {Username}", category.Key, user.Username);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error saving category {Key}", category.Key);
                return false;
            }
        }

        /// <summary>
        /// Удалить категорию (только не системные)
        /// </summary>
        public async Task<bool> DeleteCategoryAsync(string key, User user)
        {
            try
            {
                // Проверяем права доступа
                if (user.Role < Core.Enums.UserRole.Administrator)
                {
                    _logger.LogWarning("User {Username} attempted to delete category without permissions", user.Username);
                    return false;
                }

                var category = await GetCategoryByKeyAsync(key);
                if (category == null)
                {
                    _logger.LogWarning("Category {Key} not found for deletion", key);
                    return false;
                }

                if (category.IsSystem)
                {
                    _logger.LogWarning("Attempted to delete system category {Key}", key);
                    return false;
                }

                // Удаляем из хранилища
                // В полной реализации нужно удалить из персистентного хранения

                InvalidateCache();

                _logger.LogInformation("Category {Key} deleted by user {Username}", key, user.Username);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting category {Key}", key);
                return false;
            }
        }

        /// <summary>
        /// Скрыть/показать категорию для пользователя
        /// </summary>
        public async Task<bool> SetCategoryVisibilityAsync(string key, bool isVisible, User user)
        {
            try
            {
                var userSettings = await _userSettingsRepository.GetByUserIdAsync(user.Id) ?? new UserSettings
                {
                    UserId = user.Id,
                    HiddenCategories = new List<string>()
                };

                if (userSettings.HiddenCategories == null)
                    userSettings.HiddenCategories = new List<string>();

                if (isVisible)
                {
                    userSettings.HiddenCategories.Remove(key);
                }
                else
                {
                    if (!userSettings.HiddenCategories.Contains(key))
                        userSettings.HiddenCategories.Add(key);
                }

                await _userSettingsRepository.UpdateAsync(userSettings);

                _logger.LogInformation("Category {Key} visibility set to {IsVisible} for user {Username}",
                    key, isVisible, user.Username);

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error setting visibility for category {Key}", key);
                return false;
            }
        }

        /// <summary>
        /// Получить локализованное имя категории
        /// </summary>
        public string GetLocalizedCategoryName(CategoryDefinition category, string? languageCode = null)
        {
            try
            {
                // В Services слое мы не имеем доступа к LocalizationHelper из UI
                // Возвращаем DefaultName, локализация будет выполняться в UI слое
                return category.DefaultName;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error getting localized name for category {Key}", category.Key);
                return category.DefaultName;
            }
        }

        /// <summary>
        /// Автоматически создать категории из существующих приложений
        /// </summary>
        public async Task<List<CategoryDefinition>> AutoGenerateCategoriesAsync()
        {
            try
            {
                if (!_categoryConfig.Settings.AutoCreateFromApps)
                {
                    return new List<CategoryDefinition>();
                }

                // Получаем все уникальные категории из приложений
                var dbCategories = await _applicationService.GetCategoriesAsync();
                var existingCategories = await GetAllCategoriesAsync();
                var existingKeys = existingCategories.Select(c => c.Key).ToHashSet();

                var newCategories = new List<CategoryDefinition>();

                foreach (var dbCategory in dbCategories)
                {
                    if (!existingKeys.Contains(dbCategory))
                    {
                        var newCategory = new CategoryDefinition
                        {
                            Key = dbCategory,
                            DefaultName = dbCategory,
                            LocalizationKey = $"Category_{dbCategory}",
                            Icon = _categoryConfig.Settings.DefaultIcon,
                            Color = _categoryConfig.Settings.DefaultColor,
                            SortOrder = 999,
                            IsSystem = false,
                            IsVisible = true,
                            IsAutoGenerated = true,
                            CreatedAt = DateTime.Now,
                            LastModified = DateTime.Now
                        };

                        newCategories.Add(newCategory);
                    }
                }

                if (newCategories.Any())
                {
                    InvalidateCache();
                    _logger.LogInformation("Auto-generated {Count} new categories", newCategories.Count);
                }

                return newCategories;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error auto-generating categories");
                return new List<CategoryDefinition>();
            }
        }

        /// <summary>
        /// Синхронизировать категории с базой приложений
        /// </summary>
        public async Task SynchronizeCategoriesAsync()
        {
            try
            {
                await AutoGenerateCategoriesAsync();
                _logger.LogInformation("Categories synchronized with application database");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error synchronizing categories");
            }
        }

        /// <summary>
        /// Получить статистику использования категорий
        /// </summary>
        public async Task<Dictionary<string, int>> GetCategoryStatisticsAsync()
        {
            try
            {
                var applications = await _applicationService.GetAllApplicationsAsync();
                var stats = applications
                    .Where(a => !string.IsNullOrEmpty(a.Category))
                    .GroupBy(a => a.Category)
                    .ToDictionary(g => g.Key, g => g.Count());

                _logger.LogDebug("Generated category statistics for {Count} categories", stats.Count);
                return stats;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting category statistics");
                return new Dictionary<string, int>();
            }
        }

        /// <summary>
        /// Сбросить категории к предустановленным
        /// </summary>
        public async Task<bool> ResetToDefaultCategoriesAsync(User user)
        {
            try
            {
                // Проверяем права доступа
                if (user.Role < Core.Enums.UserRole.Administrator)
                {
                    _logger.LogWarning("User {Username} attempted to reset categories without permissions", user.Username);
                    return false;
                }

                // Очищаем скрытые категории пользователя
                var userSettings = await _userSettingsRepository.GetByUserIdAsync(user.Id);
                if (userSettings != null)
                {
                    userSettings.HiddenCategories = new List<string>();
                    await _userSettingsRepository.UpdateAsync(userSettings);
                }

                InvalidateCache();

                _logger.LogInformation("Categories reset to defaults by user {Username}", user.Username);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error resetting categories to defaults");
                return false;
            }
        }

        /// <summary>
        /// Экспортировать конфигурацию категорий
        /// </summary>
        public async Task<CategoryConfiguration> ExportCategoriesAsync()
        {
            try
            {
                var categories = await GetAllCategoriesAsync();
                return new CategoryConfiguration
                {
                    PredefinedCategories = categories,
                    Settings = _categoryConfig.Settings
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error exporting categories");
                return new CategoryConfiguration();
            }
        }

        /// <summary>
        /// Импортировать конфигурацию категорий
        /// </summary>
        public async Task<bool> ImportCategoriesAsync(CategoryConfiguration configuration, User user)
        {
            try
            {
                // Проверяем права доступа
                if (user.Role < Core.Enums.UserRole.Administrator)
                {
                    _logger.LogWarning("User {Username} attempted to import categories without permissions", user.Username);
                    return false;
                }

                // В полной реализации здесь будет импорт конфигурации
                // Добавляем async операцию для устранения предупреждения CS1998
                await Task.Delay(1);
                
                InvalidateCache();

                _logger.LogInformation("Categories imported by user {Username}", user.Username);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error importing categories");
                return false;
            }
        }

        /// <summary>
        /// Сбросить кэш категорий
        /// </summary>
        private void InvalidateCache()
        {
            lock (_lockObject)
            {
                _cachedCategories = null;
                _cacheExpiry = DateTime.MinValue;
            }
        }

        /// <summary>
        /// Публичный метод для принудительного сброса кэша категорий
        /// </summary>
        public void ClearCache()
        {
            InvalidateCache();
            _logger.LogInformation("Category cache cleared manually");
        }
    }
}