using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using Microsoft.Extensions.Logging;
using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.Wpf;
using WindowsLauncher.Core.Models.Lifecycle;
using WindowsLauncher.Core.Interfaces.UI;
using WindowsLauncher.Core.Enums;
using CoreApplication = WindowsLauncher.Core.Models.Application;

namespace WindowsLauncher.UI.Components.WebView2
{
    /// <summary>
    /// WebView2 –æ–∫–Ω–æ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    /// </summary>
    public partial class WebView2ApplicationWindow : Window, INotifyPropertyChanged, IWebView2Window
    {
        private readonly ILogger<WebView2ApplicationWindow> _logger;
        private readonly CoreApplication _application;
        private bool _isClosedByUser = false;
        private bool _isInitialized = false;

        // Backing fields –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        private string _windowTitle = "Web Application";
        private string _applicationName = "Web Application";
        private string _applicationIcon = "üåê";
        private bool _showApplicationHeader = true;
        private bool _showStatusBar = true;
        private string _statusText = "–ì–æ—Ç–æ–≤";
        private bool _isLoading = false;
        private string _connectionStatus = "‚óè";
        private Brush _connectionStatusColor = Brushes.Green;

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ApplicationLifecycleService
        public event EventHandler<ApplicationInstance>? WindowActivated;
        public event EventHandler<ApplicationInstance>? WindowDeactivated;
        public event EventHandler<ApplicationInstance>? WindowClosed;
        public event EventHandler<ApplicationInstance>? WindowStateChanged;

        // –°–≤–æ–π—Å—Ç–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        public string InstanceId { get; }
        public DateTime StartTime { get; }
        public string LaunchedBy { get; }
        
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è IWebView2Window
        public CoreApplication Application => _application;
        public bool IsClosed { get; private set; } = false;

        public WebView2ApplicationWindow(
            CoreApplication application, 
            string instanceId, 
            string launchedBy,
            ILogger<WebView2ApplicationWindow> logger)
        {
            _application = application ?? throw new ArgumentNullException(nameof(application));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            
            InstanceId = instanceId;
            LaunchedBy = launchedBy;
            StartTime = DateTime.Now;

            InitializeComponent();
            InitializeWindow();
            DataContext = this;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            Title = _application.Name;

            _logger.LogDebug("WebView2ApplicationWindow created for {AppName} (Instance: {InstanceId})", 
                application.Name, instanceId);
        }

        #region –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

        public string WindowTitle
        {
            get => _windowTitle;
            set => SetProperty(ref _windowTitle, value);
        }

        public string ApplicationName
        {
            get => _applicationName;
            set => SetProperty(ref _applicationName, value);
        }

        public string ApplicationIcon
        {
            get => _applicationIcon;
            set => SetProperty(ref _applicationIcon, value);
        }

        public bool ShowApplicationHeader
        {
            get => _showApplicationHeader;
            set => SetProperty(ref _showApplicationHeader, value);
        }

        public bool ShowStatusBar
        {
            get => _showStatusBar;
            set => SetProperty(ref _showStatusBar, value);
        }

        public string StatusText
        {
            get => _statusText;
            set => SetProperty(ref _statusText, value);
        }

        public bool IsLoading
        {
            get => _isLoading;
            set => SetProperty(ref _isLoading, value);
        }

        public string ConnectionStatus
        {
            get => _connectionStatus;
            set => SetProperty(ref _connectionStatus, value);
        }

        public Brush ConnectionStatusColor
        {
            get => _connectionStatusColor;
            set => SetProperty(ref _connectionStatusColor, value);
        }

        public CoreWebView2CreationProperties? WebViewCreationProperties { get; private set; }

        #endregion

        #region –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        private void InitializeWindow()
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –∏–∑ Application
            ApplicationName = _application.Name;
            WindowTitle = _application.Name;
            ApplicationIcon = !string.IsNullOrEmpty(_application.IconText) ? _application.IconText : "üåê";

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebView2 Creation Properties
            WebViewCreationProperties = new CoreWebView2CreationProperties
            {
                UserDataFolder = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                    "WindowsLauncher",
                    "WebView2",
                    InstanceId)
            };

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
            Activated += OnWindowActivated;
            Deactivated += OnWindowDeactivated;
            StateChanged += OnWindowStateChanged;
            Loaded += OnWindowLoaded;
        }

        private async void OnWindowLoaded(object sender, RoutedEventArgs e)
        {
            try
            {
                await InitializeWebViewAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize WebView2 for {AppName}", _application.Name);
                StatusText = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}";
                ConnectionStatusColor = Brushes.Red;
                ConnectionStatus = "‚óè";
            }
        }

        private async Task InitializeWebViewAsync()
        {
            try
            {
                _logger.LogDebug("Initializing WebView2 for {AppName}", _application.Name);
                
                // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebView2 (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                await WebView.EnsureCoreWebView2Async();

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebView2
                ConfigureWebView2();

                // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ URL
                var url = GetNavigationUrl();
                if (!string.IsNullOrEmpty(url))
                {
                    StatusText = $"–ó–∞–≥—Ä—É–∑–∫–∞ {url}...";
                    IsLoading = true;
                    
                    if (url == "about:blank")
                    {
                        // –î–ª—è about:blank –∏—Å–ø–æ–ª—å–∑—É–µ–º NavigateToString
                        WebView.CoreWebView2.NavigateToString("<html><body><h1>Chrome App</h1><p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.</p></body></html>");
                    }
                    else
                    {
                        WebView.CoreWebView2.Navigate(url);
                    }
                }

                _isInitialized = true;
                _logger.LogInformation("WebView2 initialized successfully for {AppName}", _application.Name);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error initializing WebView2 for {AppName}", _application.Name);
                throw;
            }
        }

        private void ConfigureWebView2()
        {
            var webView2 = WebView.CoreWebView2;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            webView2.Settings.IsScriptEnabled = true;
            webView2.Settings.AreDefaultScriptDialogsEnabled = true;
            webView2.Settings.IsWebMessageEnabled = true;
            webView2.Settings.AreDevToolsEnabled = true; // TODO: –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ production

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            webView2.Settings.UserAgent = $"WindowsLauncher/1.0 WebView2/{webView2.Environment.BrowserVersionString}";

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            webView2.DocumentTitleChanged += (s, e) =>
            {
                if (!string.IsNullOrEmpty(webView2.DocumentTitle))
                {
                    var newTitle = $"{_application.Name} - {webView2.DocumentTitle}";
                    WindowTitle = newTitle;
                    _logger.LogTrace("Document title changed to '{Title}' for {AppName}", newTitle, _application.Name);
                }
            };

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
            webView2.WindowCloseRequested += (s, e) =>
            {
                _logger.LogDebug("WebView2 window close requested for {AppName}", _application.Name);
                _isClosedByUser = true;
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤ UI thread
                Dispatcher.BeginInvoke(() => Close());
            };

            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            webView2.NewWindowRequested += (s, e) =>
            {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–∫–Ω–∞ –≤ —Ç–æ–º –∂–µ WebView
                e.Handled = true;
                WebView.CoreWebView2.Navigate(e.Uri);
            };

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            webView2.PermissionRequested += WebView_PermissionRequested;

            _logger.LogDebug("WebView2 configured for {AppName}", _application.Name);
        }

        #endregion

        #region –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebView2

        private void WebView_CoreWebView2InitializationCompleted(object? sender, CoreWebView2InitializationCompletedEventArgs e)
        {
            if (e.IsSuccess)
            {
                _logger.LogDebug("CoreWebView2 initialization completed successfully for {AppName}", _application.Name);
                ConnectionStatus = "‚óè";
                ConnectionStatusColor = Brushes.Green;
            }
            else
            {
                _logger.LogError(e.InitializationException, "CoreWebView2 initialization failed for {AppName}", _application.Name);
                ConnectionStatus = "‚óè";
                ConnectionStatusColor = Brushes.Red;
                StatusText = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e.InitializationException?.Message}";
            }
        }

        private void WebView_NavigationStarting(object? sender, CoreWebView2NavigationStartingEventArgs e)
        {
            _logger.LogDebug("Navigation starting to {Uri} for {AppName}", e.Uri, _application.Name);
            IsLoading = true;
            StatusText = $"–ó–∞–≥—Ä—É–∑–∫–∞ {e.Uri}...";
            ConnectionStatus = "‚óè";
            ConnectionStatusColor = Brushes.Orange;
        }

        private void WebView_NavigationCompleted(object? sender, CoreWebView2NavigationCompletedEventArgs e)
        {
            IsLoading = false;
            
            if (e.IsSuccess)
            {
                _logger.LogDebug("Navigation completed successfully for {AppName}", _application.Name);
                StatusText = "–ì–æ—Ç–æ–≤";
                ConnectionStatus = "‚óè";
                ConnectionStatusColor = Brushes.Green;
            }
            else
            {
                _logger.LogWarning("Navigation failed for {AppName}: {Error}", _application.Name, e.WebErrorStatus);
                StatusText = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e.WebErrorStatus}";
                ConnectionStatus = "‚óè";
                ConnectionStatusColor = Brushes.Red;
            }
        }



        private void WebView_PermissionRequested(object? sender, CoreWebView2PermissionRequestedEventArgs e)
        {
            // TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            _logger.LogDebug("Permission requested: {Kind} for {AppName}", e.PermissionKind, _application.Name);
            
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            switch (e.PermissionKind)
            {
                case CoreWebView2PermissionKind.Geolocation:
                case CoreWebView2PermissionKind.Notifications:
                case CoreWebView2PermissionKind.ClipboardRead:
                    e.State = CoreWebView2PermissionState.Allow;
                    break;
                default:
                    e.State = CoreWebView2PermissionState.Deny;
                    break;
            }
        }

        #endregion

        #region –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞

        private void OnWindowActivated(object? sender, EventArgs e)
        {
            _logger.LogTrace("Window activated for {AppName} (Instance: {InstanceId})", _application.Name, InstanceId);
            var instance = CreateApplicationInstance();
            WindowActivated?.Invoke(this, instance);
        }

        private void OnWindowDeactivated(object? sender, EventArgs e)
        {
            _logger.LogTrace("Window deactivated for {AppName} (Instance: {InstanceId})", _application.Name, InstanceId);
            var instance = CreateApplicationInstance();
            WindowDeactivated?.Invoke(this, instance);
        }

        private void OnWindowStateChanged(object? sender, EventArgs e)
        {
            _logger.LogTrace("Window state changed to {State} for {AppName} (Instance: {InstanceId})", 
                WindowState, _application.Name, InstanceId);
            var instance = CreateApplicationInstance();
            WindowStateChanged?.Invoke(this, instance);
        }

        private void Window_Closing(object? sender, CancelEventArgs e)
        {
            try
            {
                _logger.LogDebug("Window closing for {AppName} (Instance: {InstanceId}), ClosedByUser: {ClosedByUser}", 
                    _application.Name, InstanceId, _isClosedByUser);

                IsClosed = true;
                var instance = CreateApplicationInstance();
                WindowClosed?.Invoke(this, instance);

                // Cleanup WebView2
                WebView?.Dispose();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during window closing for {AppName}", _application.Name);
            }
        }

        #endregion

        #region –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = System.Windows.WindowState.Minimized;
        }

        private void MaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState == System.Windows.WindowState.Maximized 
                ? System.Windows.WindowState.Normal 
                : System.Windows.WindowState.Maximized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            _isClosedByUser = true;
            Close();
        }

        #endregion

        #region –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        /// <summary>
        /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –æ–∫–Ω–æ (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
        /// </summary>
        public async Task<bool> SwitchToAsync()
        {
            try
            {
                if (WindowState == System.Windows.WindowState.Minimized)
                {
                    WindowState = System.Windows.WindowState.Normal;
                }

                Activate();
                Focus();

                _logger.LogDebug("Switched to window for {AppName} (Instance: {InstanceId})", _application.Name, InstanceId);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to switch to window for {AppName}", _application.Name);
                return false;
            }
        }

        /// <summary>
        /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É URL
        /// </summary>
        public async Task NavigateAsync(string url)
        {
            try
            {
                if (_isInitialized && WebView.CoreWebView2 != null)
                {
                    WebView.CoreWebView2.Navigate(url);
                    _logger.LogDebug("Navigated to {Url} for {AppName}", url, _application.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to navigate to {Url} for {AppName}", url, _application.Name);
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL
        /// </summary>
        public string GetCurrentUrl()
        {
            return WebView.CoreWebView2?.Source ?? _application.ExecutablePath ?? "";
        }

        #endregion

        #region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ WebView2
        /// </summary>
        private string GetNavigationUrl()
        {
            if (_application.Type == ApplicationType.Web)
            {
                return _application.ExecutablePath ?? "";
            }
            
            if (_application.Type == ApplicationType.ChromeApp)
            {
                // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º URL –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö --app=URL
                var args = _application.Arguments ?? "";
                var match = System.Text.RegularExpressions.Regex.Match(args, @"--app=([^\s]+)");
                if (match.Success)
                {
                    return match.Groups[1].Value;
                }
                
                // –ï—Å–ª–∏ ExecutablePath –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                var path = _application.ExecutablePath ?? "";
                if (IsValidWebUrl(path))
                {
                    return path;
                }
                
                // –î–ª—è Chrome Apps –±–µ–∑ —è–≤–Ω–æ–≥–æ URL –≤–æ–∑–≤—Ä–∞—â–∞–µ–º about:blank
                if (path.Contains("chrome.exe", StringComparison.OrdinalIgnoreCase))
                {
                    return "about:blank";
                }
                
                return path;
            }

            return "";
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –≤–µ–±-–∞–¥—Ä–µ—Å–æ–º
        /// </summary>
        private bool IsValidWebUrl(string url)
        {
            if (string.IsNullOrWhiteSpace(url))
                return false;

            return Uri.TryCreate(url, UriKind.Absolute, out var uri) && 
                   (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps);
        }

        private ApplicationInstance CreateApplicationInstance()
        {
            return new ApplicationInstance
            {
                InstanceId = InstanceId,
                Application = _application,
                ProcessId = Environment.ProcessId, // WebView2 —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                StartTime = StartTime,
                State = GetCurrentApplicationState(),
                LaunchedBy = LaunchedBy
            };
        }

        private ApplicationState GetCurrentApplicationState()
        {
            if (_isClosedByUser)
                return ApplicationState.Terminated;

            return WindowState switch
            {
                System.Windows.WindowState.Minimized => ApplicationState.Minimized,
                System.Windows.WindowState.Maximized => ApplicationState.Running,
                System.Windows.WindowState.Normal => ApplicationState.Running,
                _ => ApplicationState.Running
            };
        }

        #endregion

        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
        {
            if (Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }

        #endregion
    }
}